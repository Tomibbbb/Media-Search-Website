openapi: 3.0.0
paths:
  /api:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /api/users/profile:
    get:
      operationId: UsersController_getProfile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 60d21b4667d0d8992e610c85
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
                  email:
                    type: string
                    example: john.doe@example.com
        '401':
          description: Unauthorized - invalid or expired token
      security:
        - bearer: []
      summary: Get user profile (protected route)
      tags: &ref_0
        - users
  /api/users/saved-searches:
    get:
      operationId: UsersController_getSavedSearches
      parameters: []
      responses:
        '200':
          description: Saved searches retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedSearch'
        '401':
          description: Unauthorized - invalid or expired token
      security:
        - bearer: []
      summary: Get user saved searches
      tags: *ref_0
    post:
      operationId: UsersController_addSavedSearch
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - query
              properties:
                type:
                  type: string
                  enum:
                    - image
                    - audio
                  example: image
                query:
                  type: string
                  example: nature
                filters:
                  type: object
                  example:
                    license: by
                    category: photograph
      responses:
        '201':
          description: Search saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedSearch'
        '401':
          description: Unauthorized - invalid or expired token
      security:
        - bearer: []
      summary: Save a new search
      tags: *ref_0
  /api/users/saved-searches/{index}:
    delete:
      operationId: UsersController_deleteSavedSearch
      parameters:
        - name: index
          required: true
          in: path
          description: Index of the search to delete
          schema:
            type: number
      responses:
        '200':
          description: Search deleted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedSearch'
        '401':
          description: Unauthorized - invalid or expired token
        '404':
          description: Saved search not found
      security:
        - bearer: []
      summary: Delete a saved search by index
      tags: *ref_0
  /api/auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User has been successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60d21b4667d0d8992e610c85
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request - validation failed
        '409':
          description: Email already exists
      summary: Register a new user
      tags: &ref_1
        - auth
  /api/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: User has been successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60d21b4667d0d8992e610c85
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request - validation failed
        '401':
          description: Invalid credentials
      summary: Log in with email and password
      tags: *ref_1
  /api/auth/verify-token:
    get:
      operationId: AuthController_verifyToken
      parameters: []
      responses:
        '200':
          description: Token is valid
        '401':
          description: Invalid token
      security:
        - bearer: []
      summary: Verify JWT token is valid (for testing)
      tags: *ref_1
  /api/auth/google:
    get:
      operationId: AuthController_googleAuth
      parameters: []
      responses:
        '200':
          description: ''
      summary: Initiate Google OAuth authentication
      tags: *ref_1
  /api/auth/google/callback:
    get:
      operationId: AuthController_googleAuthCallback
      parameters: []
      responses:
        '200':
          description: Login successful
      summary: Google OAuth callback
      tags: *ref_1
  /api/openverse/images:
    get:
      operationId: OpenverseController_searchImages
      parameters:
        - name: q
          required: true
          in: query
          description: Search query for images
          schema:
            example: mountain
            type: string
        - name: page_size
          required: false
          in: query
          description: The number of results to return per page
          schema:
            default: 20
            example: 20
            type: number
        - name: page
          required: false
          in: query
          description: The page number to return
          schema:
            default: 1
            example: 1
            type: number
        - name: license
          required: false
          in: query
          description: Filter by license type
          schema:
            $ref: '#/components/schemas/ImageLicense'
        - name: category
          required: false
          in: query
          description: Filter by image category
          schema:
            $ref: '#/components/schemas/ImageCategory'
        - name: source
          required: false
          in: query
          description: Filter by image source
          schema:
            example: flickr
            type: string
        - name: creator
          required: false
          in: query
          description: Filter by image creator
          schema:
            example: John Doe
            type: string
        - name: tags
          required: false
          in: query
          description: Filter by tags
          schema:
            example: nature,landscape
            type: string
      responses:
        '200':
          description: Returns a paginated list of images
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security: &ref_2
        - bearer: []
      summary: Search for images in Openverse
      tags: &ref_3
        - openverse
  /api/openverse/images/{id}:
    get:
      operationId: OpenverseController_getImage
      parameters:
        - name: id
          required: true
          in: path
          description: Image ID
          schema:
            example: 0dbc5647-8551-4e94-a123-58e8e0255349
            type: string
      responses:
        '200':
          description: Returns a single image
        '401':
          description: Unauthorized
        '404':
          description: Image not found
        '500':
          description: Internal server error
      security: *ref_2
      summary: Get a specific image by ID
      tags: *ref_3
  /api/openverse/audio:
    get:
      operationId: OpenverseController_searchAudio
      parameters:
        - name: q
          required: true
          in: query
          description: Search query for audio
          schema:
            example: piano
            type: string
        - name: page_size
          required: false
          in: query
          description: The number of results to return per page
          schema:
            default: 20
            example: 20
            type: number
        - name: page
          required: false
          in: query
          description: The page number to return
          schema:
            default: 1
            example: 1
            type: number
        - name: license
          required: false
          in: query
          description: Filter by license type
          schema:
            $ref: '#/components/schemas/AudioLicense'
        - name: source
          required: false
          in: query
          description: Filter by audio source
          schema:
            example: jamendo
            type: string
        - name: creator
          required: false
          in: query
          description: Filter by audio creator
          schema:
            example: John Doe
            type: string
        - name: genres
          required: false
          in: query
          description: Filter by audio genre
          schema:
            example: classical
            type: string
        - name: duration
          required: false
          in: query
          description: Filter by duration
          schema:
            example: 0-300
            type: string
        - name: tags
          required: false
          in: query
          description: Filter by tags
          schema:
            example: music,instrumental
            type: string
      responses:
        '200':
          description: Returns a paginated list of audio files
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security: *ref_2
      summary: Search for audio in Openverse
      tags: *ref_3
  /api/openverse/audio/{id}:
    get:
      operationId: OpenverseController_getAudio
      parameters:
        - name: id
          required: true
          in: path
          description: Audio ID
          schema:
            example: 4fe9f628-5712-49dd-a3c7-89f1f04a3ce7
            type: string
      responses:
        '200':
          description: Returns a single audio file
        '401':
          description: Unauthorized
        '404':
          description: Audio not found
        '500':
          description: Internal server error
      security: *ref_2
      summary: Get a specific audio file by ID
      tags: *ref_3
info:
  title: NestJS API
  description: The NestJS API documentation
  version: '1.0'
  contact: {}
tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: User endpoints
  - name: openverse
    description: Openverse media API endpoints
  - name: documentation
    description: API Documentation endpoints
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SavedSearch:
      type: object
      properties:
        type:
          type: string
          description: Type of search (image or audio)
          example: image
          enum:
            - image
            - audio
        query:
          type: string
          description: Search query
          example: nature
        filters:
          type: object
          description: Search filters
          example:
            license: by
            category: photograph
        createdAt:
          format: date-time
          type: string
          description: When the search was saved
          example: '2023-01-01T00:00:00.000Z'
      required:
        - type
        - query
        - filters
        - createdAt
    CreateUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: The first name of the user
          example: John
        lastName:
          type: string
          description: The last name of the user
          example: Doe
        email:
          type: string
          description: The email address of the user
          example: john.doe@example.com
        password:
          type: string
          description: The password for the user account (min 6 characters)
          example: password123
          minLength: 6
      required:
        - firstName
        - lastName
        - email
        - password
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          description: The email address of the user
          example: john.doe@example.com
        password:
          type: string
          description: The password for the user account
          example: password123
      required:
        - email
        - password
    ImageLicense:
      type: string
      enum:
        - by
        - by-sa
        - by-nc
        - by-nd
        - by-nc-sa
        - by-nc-nd
        - pdm
        - cc0
    ImageCategory:
      type: string
      enum:
        - photograph
        - illustration
        - digitized_artwork
    AudioLicense:
      type: string
      enum:
        - by
        - by-sa
        - by-nc
        - by-nd
        - by-nc-sa
        - by-nc-nd
        - pdm
        - cc0
